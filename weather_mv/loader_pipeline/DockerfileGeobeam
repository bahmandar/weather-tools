FROM apache/beam_python3.8_sdk:2.40.0

ARG WORKDIR=/pipeline
RUN mkdir -p ${WORKDIR}
WORKDIR ${WORKDIR}

ENV CCACHE_DISABLE=1
ENV PATH=$PATH:$WORKDIR/build/usr/local/bin
ENV CLOUDSDK_PYTHON_SITEPACKAGES=1

RUN apt-get update -y \
    && apt-get install libffi-dev git g++ make cmake automake pkg-config libeccodes-dev libeccodes-tools metview -y \
    && apt-get clean

ENV CURL_VERSION 7.83.1
RUN wget -q https://curl.haxx.se/download/curl-${CURL_VERSION}.tar.gz \
    && tar -xzf curl-${CURL_VERSION}.tar.gz && cd curl-${CURL_VERSION} \
    && ./configure --prefix=/usr/local \
    --with-openssl \
    && echo "building CURL ${CURL_VERSION}..." \
    && make --quiet -j$(nproc) && make --quiet install \
    && cd $WORKDIR && rm -rf curl-${CURL_VERSION}.tar.gz curl-${CURL_VERSION}

ENV GEOS_VERSION 3.10.3
RUN wget -q https://download.osgeo.org/geos/geos-${GEOS_VERSION}.tar.bz2 \
    && tar -xjf geos-${GEOS_VERSION}.tar.bz2  \
    && cd geos-${GEOS_VERSION} \
    && ./configure --prefix=/usr/local \
    && echo "building geos ${GEOS_VERSION}..." \
    && make --quiet -j$(nproc) && make --quiet install \
    && cd $WORKDIR && rm -rf geos-${GEOS_VERSION}.tar.bz2 geos-${GEOS_VERSION}

ENV SQLITE_VERSION 3380500
ENV SQLITE_YEAR 2022
RUN wget -q https://sqlite.org/${SQLITE_YEAR}/sqlite-autoconf-${SQLITE_VERSION}.tar.gz \
    && tar -xzf sqlite-autoconf-${SQLITE_VERSION}.tar.gz && cd sqlite-autoconf-${SQLITE_VERSION} \
    && ./configure --prefix=/usr/local \
    && echo "building SQLITE ${SQLITE_VERSION}..." \
    && make --quiet -j$(nproc) && make --quiet install \
    && cd $WORKDIR && rm -rf sqlite-autoconf-${SQLITE_VERSION}.tar.gz sqlite-autoconf-${SQLITE_VERSION}

ENV PROJ_VERSION 9.0.0
RUN wget -q https://download.osgeo.org/proj/proj-${PROJ_VERSION}.tar.gz \
    && tar -xzf proj-${PROJ_VERSION}.tar.gz \
    && cd proj-${PROJ_VERSION} \
    && mkdir build && cd build \
    && PKG_CONFIG_PATH=/usr/local/lib/pkgconfig cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local -DENABLE_CURL=OFF -DBUILD_PROJSYNC=OFF \
    && echo "building proj ${PROJ_VERSION}..." \
    && cmake --build . && cmake --build . --target install \
    && cd $WORKDIR && rm -rf proj-${PROJ_VERSION}.tar.gz proj-${PROJ_VERSION}

ENV OPENJPEG_VERSION 2.5.0
RUN wget -q -O openjpeg-${OPENJPEG_VERSION}.tar.gz https://github.com/uclouvain/openjpeg/archive/v${OPENJPEG_VERSION}.tar.gz \
    && tar -zxf openjpeg-${OPENJPEG_VERSION}.tar.gz \
    && cd openjpeg-${OPENJPEG_VERSION} \
    && mkdir build && cd build \
    && cmake .. -DBUILD_THIRDPARTY:BOOL=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local \
    && echo "building openjpeg ${OPENJPEG_VERSION}..." \
    && make --quiet -j$(nproc) && make --quiet install \
    && cd $WORKDIR && rm -rf openjpeg-${OPENJPEG_VERSION}.tar.gz openjpeg-${OPENJPEG_VERSION}

ENV GDAL_VERSION 3.5.1
RUN wget -q https://download.osgeo.org/gdal/${GDAL_VERSION}/gdal-${GDAL_VERSION}.tar.gz \
    && tar -xzf gdal-${GDAL_VERSION}.tar.gz && cd gdal-${GDAL_VERSION} \
    && mkdir build && cd build \
    && cmake .. -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=/usr/local \
    -DGDAL_USE_CURL=OFF \
    -DGDAL_USE_GEOS=ON \
    -DGEOS_INCLUDE_DIR=/usr/local/include/ \
    -DGEOS_LIBRARY=/usr/local/lib/ \
    && echo "building GDAL ${GDAL_VERSION}..." \
    && cmake --build . && cmake --build . --target install \
    && cd $WORKDIR && rm -rf gdal-${GDAL_VERSION}.tar.gz gdal-${GDAL_VERSION}

RUN ldconfig
RUN pip install --upgrade pip
RUN pip install gdal==$GDAL_VERSION
COPY requirements.txt ${WORKDIR}/requirements.txt
RUN pip install --upgrade pip
RUN pip install --force-reinstall -r ${WORKDIR}/requirements.txt
#https://cloud.google.com/iap/docs/using-tcp-forwarding#increasing_the_tcp_upload_bandwidth
RUN $(gcloud info --format="value(basic.python_location)") -m pip install numpy
RUN gcloud components install alpha
RUN gcloud components update --version=395.0.0